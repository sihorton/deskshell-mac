/**
* @author: sihorton
* Implementation of a deskshell api.
*
var shellApp = deskShell.startApp({
	openSocket:true
	,launchChromium:true
	,htdocs:'/content'
		//optional parameters
		,port:8086
		,cport:8087
		,chromiumPath:'..path_to_chromium_binary'
});
*/
var defaultChromiumPath = require('path').normalize(__dirname +"/../../MacOS/chromium");
var chromeProfile = require('path').normalize(__dirname+"../../chrome_profile");
var Q = require("q");
var freeport = require("freeport");
var rDebug = require('chrome-rdebug').rDebug;
var request = require("request");
var fs = require("fs");
var path = require("path");

var shellApi = {

	// Variables
	v:0.1,
	chromeDebugPort:9222,
	defaultTimeout: 2000,
	
	// Get a free port
	getFreePort:function(app, port) {
		var getting = Q.defer();
		if (!port) {
			freeport(function(er, port) {
				if (er) getting.reject({error:er,app:app});
				getting.resolve({app:app,port:port});
			});
		} else {
			getting.resolve({app:app,port:port});
		}
		return getting.promise;		
	},
	
	getDebugSocket:function(app,appUrl, launching, timeout, tries) {
		console.log("getDebugSocket",appUrl,timeout,tries);
		
		// If the tries arent defined, default them to zero.
		if (tries == undefined) tries = 3;
		
		// Fix for systems that start the browser slightly delayed.
		setTimeout(function() {
			request("http://localhost:"+app.cport+"/json", function(error, response, body) {
				var err = null;
				try {
					var chromeDebugOptions = JSON.parse(body);
				} catch(e) {
					launching.reject({error:e,app:app});
					err = e;
				}
				
				if (!err) {
					var chromeDebugUrl;
					for(var s=0; s<chromeDebugOptions.length; s++) {
						if ((chromeDebugOptions[s]['url'] == appUrl) && (chromeDebugOptions[s]['webSocketDebuggerUrl'])) {
							chromeDebugUrl = chromeDebugOptions[s].webSocketDebuggerUrl;
							console.log("found debug socket", chromeDebugUrl);
							break;
						}
					}
					if (!chromeDebugUrl) {
						if (tries > 2) {
							launching.reject({error:"Could not find debug websocket", app:app});
						} else {
							shellApi.getDebugSocket(app,appUrl, launching, shellApi.defaultTimeout, tries+1);
						}
					} else {
						//bugfix for wierd portable chrome on windows.
						if (chromeDebugUrl.indexOf('ws:///') > -1) {
							chromeDebugUrl = chromeDebugUrl.replace('ws:///','ws://localhost:'+app.cport+'/');
						}
						app.chromiumDebugUrl = chromeDebugUrl;
						app.rDebugApi = rDebug.openSocket(chromeDebugUrl);
						app.rDebugApi.on('*',function(event) {
						
							// the fake .on("close") - close and exit if the browser does.
							if (event.method == "Inspector.detached" && event.params && event.params['reason'] == "target_closed") {
								if (app.params['exitOnChromiumClose']) {
									console.log("auto close");
									process.exit(0);
								}
							}
							
							console.log("Event:",event);

						});
						launching.resolve(app);
					}
				}
				
			})
			
		},timeout);
	},
	
	startApp:function(params) {
		var starting = Q.defer();
		var myApp = {
			params:shellApi.appDef
		}
		for(var p in params) {
			myApp.params[p] = params[p];
		}
			shellApi.getFreePort(myApp, myApp.params['port'])
			.then(function(dat) {
				var app = dat.app;
				app.port = dat.port;
				
				if (app.params['htdocs']) {
					var fs = require('fs');
					app.server = require('http').createServer(myApp.params['serverHandler'] || function handler (req, res) {
						var serveFile = '';
						switch (req.url) {
							case '/deskShell/clientApi.js':
								serveFile = __dirname + '/clientApi.js'
							break;
							// Serve default file.
							case '/':
								serveFile = app.params['htdocs'] + "/" + app.params['defaultLocation'];
							break;
							default:
								serveFile = app.params['htdocs'] + req.url;
							break;
						}

						console.log("Serving: "+serveFile);
						
					  fs.readFile(serveFile,function (err, data) {
						if (err) {
						  res.writeHead(500);
						  return res.end('Error loading '+req.url);
						}
						res.writeHead(200);
						res.end(data);
					  });
					});
					app.server.listen(app.port);
					console.log("serving application on port:",app.port);
				}
				return app;
			}).then(function(app) {
				if (app.params['openSocket']) {
					var io = require("socket.io").listen(app.server);
					io.set('log level',1);
					app.socketio = io
				}
				return app;
			}).then(function(app) {
				//launch chrome
				var launching = Q.defer();
				if (app.params['launchChromium']) {
					shellApi.getFreePort(app,shellApi.chromeDebugPort||app.params['port'])
					.then(function(dat) {
						var app = dat.app;
						app.cport = dat.port;
						shellApi.chromeDebugPort = dat.port;
						//launch chrome
						if (!app.params['chromiumPath']) app.params['chromiumPath'] =defaultChromiumPath;
						//http://peter.sh/experiments/chromium-command-line-switches/
						
						var appUrl ='http://localhost:'+myApp.port+"/"
						if (!app.params['chromiumCmd']) app.params['chromiumCmd'] =  [
							'--app='+appUrl
							,'--remote-debugging-port='+app.cport
							,'--user-data-dir='+chromeProfile
							,'--app-window-size=1024,800'
							
						];
						
						var exec = require('child_process').exec;
						app.chromium = exec(app.params['chromiumPath']+" "+app.params['chromiumCmd'].join(' '),function(error, stdout, stderr) {
								if (error) console.log("chromium exec error:"+error);
						});
						console.log("chrome debug port:",app.cport);
						console.log(appUrl);
						
						shellApi.getDebugSocket(app,appUrl,launching,200);
						console.log("called");
					});
				} else {
					launching.resolve(app);
				}
				return launching.promise;
			}).then(function(app) {
				starting.resolve(app);
			}).fail(function(error) {
				console.log("error starting app",error);
				starting.reject(error);
			});
		return starting.promise;
	},
	
	//simple wrappers
	ifexists:function(path) {
		var checking = Q.defer();
		fs.exists(path, function(exists) {
			if (!exists) {
				return checking.reject(path + "not found");
			} else {
				return checking.resolve();
			}
		});
		return checking.promise;
	},
	launchApp:function(path) {
		//launch another app.
		require('child_process')
			.exec(deskShell.platformDir+'\\..\\..\\deskshell.exe "'+path+'"',function(error, stdout, stderr) {
				if (error) console.log("launchApp exec error:"+error);
		});
	},
	launchAppDebug:function(path) {
		//launch another app.
		require('child_process')
			.exec(deskShell.platformDir+'\\..\\..\\deskshell_debug.exe "'+path+'"',function(error, stdout, stderr) {
				if (error) console.log("launchApp exec error:"+error);
		});
	},
	clientApiData:function() {
		/**
		* Provide a json file to the client holding information about deskshell.
		*/
		var deskShellClientApi = {
			v:shellApi.v
			,userAppDir:path.normalize(deskShell.platformDir+'\\..\\..\\..\\deskshell-apps')
		}
		return deskShellClientApi;
	}
}

exports.api = shellApi;